--1. Average trip length

SELECT
  member_casual,
  COUNT(*) AS total_rides,
  AVG(ride_length_seconds)/60 AS avg_ride_length_mins,
  MIN(ride_length_seconds)/60 AS min_ride_length_mins,
  MAX(ride_length_seconds)/60 AS max_ride_length_mins
FROM
  `all_trips_clean`
GROUP BY
  member_casual;

--2. Number of trips by day of week
SELECT
  member_casual,
  day_of_week,
  COUNT(*) AS total_rides,
  AVG(ride_length_seconds)/60 AS avg_ride_length_mins
FROM
  `all_trips_clean`
GROUP BY
  member_casual, day_of_week
ORDER BY
  member_casual, 
  -- Optional: order days properly
  CASE
    WHEN day_of_week = 'Sunday' THEN 1
    WHEN day_of_week = 'Monday' THEN 2
    WHEN day_of_week = 'Tuesday' THEN 3
    WHEN day_of_week = 'Wednesday' THEN 4
    WHEN day_of_week = 'Thursday' THEN 5
    WHEN day_of_week = 'Friday' THEN 6
    WHEN day_of_week = 'Saturday' THEN 7
  END;

--3. NUmber of trips by hour of day
SELECT
  member_casual,
  EXTRACT(HOUR FROM started_at) AS hour_of_day,
  COUNT(*) AS total_rides
FROM
  `all_trips_clean`
GROUP BY
  member_casual, hour_of_day
ORDER BY
  member_casual, hour_of_day;


--4. Number of trips by month of year
SELECT
  member_casual,
  ride_month,
  COUNT(*) AS total_rides,
  AVG(ride_length_seconds)/60 AS avg_ride_length_mins
FROM
  `your-project.your-dataset.all_trips_clean`
GROUP BY
  member_casual, ride_month
ORDER BY
  member_casual, ride_month;

--5. Start stations count
SELECT
  member_casual,
  start_station_name,
  start_lat,
  start_lng,
  COUNT(*) AS start_count
FROM
  `all_trips_clean`
WHERE
  start_station_name IS NOT NULL
GROUP BY
  member_casual, start_station_name, start_lat, start_lng
ORDER BY
  member_casual, start_count DESC;

--6.End station count
WITH ranked_ends AS (
  SELECT
    member_casual,
    end_station_name,
    end_lat,
    end_lng,
    COUNT(*) AS end_count,
    ROW_NUMBER() OVER (
      PARTITION BY member_casual ORDER BY COUNT(*) DESC
    ) AS rn
  FROM
    `all_trips_clean`
  WHERE
    end_station_name IS NOT NULL
  GROUP BY
    member_casual, end_station_name, end_lat, end_lng
)

SELECT *
FROM ranked_ends
WHERE rn <= 10
ORDER BY member_casual, end_count DESC;


--7. Top Trips
WITH ranked_trips AS (
  SELECT
    member_casual,
    start_station_name,
    start_lat,
    start_lng,
    end_station_name,
    end_lat,
    end_lng,
    COUNT(*) AS trip_count,
    ROW_NUMBER() OVER (
      PARTITION BY member_casual ORDER BY COUNT(*) DESC
    ) AS rn
  FROM
    `your-project.your-dataset.all_trips_clean`
  WHERE
    start_station_name IS NOT NULL
    AND end_station_name IS NOT NULL
  GROUP BY
    member_casual, start_station_name, start_lat, start_lng,
    end_station_name, end_lat, end_lng
)

SELECT *
FROM ranked_trips
WHERE rn <= 10
ORDER BY member_casual, trip_count DESC;